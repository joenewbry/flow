#!/usr/bin/env python3
"""
Static file server for Flow website builder.
Serves generated HTML pages and assets.
Supports rendering markdown files on-the-fly.
"""

import os
import argparse
from pathlib import Path
from http.server import HTTPServer, SimpleHTTPRequestHandler
import socketserver
import markdown
from datetime import datetime

class FlowWebHandler(SimpleHTTPRequestHandler):
    """Custom handler for Flow web pages."""
    
    def __init__(self, *args, **kwargs):
        self.website_root = Path(__file__).parent
        super().__init__(*args, directory=str(self.website_root), **kwargs)
    
    def end_headers(self):
        # Add CORS headers for development
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        super().end_headers()
    
    def do_GET(self):
        # Handle root path - list all pages
        if self.path == '/':
            self.path = '/pages/'
            return super().do_GET()
        
        # Handle page requests - /page/name -> /pages/name.md (or .html fallback)
        if self.path.startswith('/page/'):
            page_name = self.path[6:]  # Remove '/page/'
            # Remove any query parameters
            if '?' in page_name:
                page_name = page_name.split('?')[0]
            
            # Try to serve markdown file first
            md_path = self.website_root / 'pages' / f'{page_name}.md'
            if md_path.exists():
                self._serve_markdown(md_path, page_name)
                return
            
            # Fallback to HTML
            self.path = f'/pages/{page_name}.html'
        
        return super().do_GET()
    
    def _serve_markdown(self, md_path: Path, page_name: str):
        """Render and serve a markdown file as HTML."""
        try:
            # Read markdown content
            md_content = md_path.read_text(encoding='utf-8')
            
            # Initialize markdown processor
            md = markdown.Markdown(extensions=[
                'fenced_code',
                'tables',
                'nl2br',
                'sane_lists',
                'codehilite'
            ])
            
            # Convert to HTML
            html_content = md.convert(md_content)
            
            # Get metadata
            stat = md_path.stat()
            modified_date = datetime.fromtimestamp(stat.st_mtime).strftime('%Y-%m-%d %H:%M')
            
            # Extract title from first heading or use page name
            title = page_name.replace('-', ' ').title()
            lines = md_content.split('\n')
            for line in lines:
                if line.startswith('# '):
                    title = line[2:].strip()
                    break
            
            # Build complete HTML page
            html = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title} - Flow</title>
    <link rel="stylesheet" href="/static/css/styles.css">
</head>
<body>
    <header>
        <div class="container">
            <h1>{title}</h1>
            <div class="meta">
                <span class="date">{modified_date}</span>
            </div>
        </div>
    </header>
    
    <main class="container markdown-content">
        {html_content}
    </main>
    
    <footer>
        <div class="container">
            <p>Generated by <a href="https://github.com/joenewbry/flow">Flow</a></p>
        </div>
    </footer>
</body>
</html>"""
            
            # Send response
            encoded = html.encode('utf-8')
            self.send_response(200)
            self.send_header("Content-type", "text/html; charset=utf-8")
            self.send_header("Content-Length", str(len(encoded)))
            self.end_headers()
            self.wfile.write(encoded)
            
        except Exception as e:
            self.send_error(500, f"Error rendering markdown: {str(e)}")
    
    def list_directory(self, path):
        """Override to provide a nicer directory listing for pages."""
        try:
            entries = list(os.scandir(path))
        except OSError:
            self.send_error(404, "No permission to list directory")
            return None
        
        entries.sort(key=lambda e: e.name)
        
        # Generate HTML page list
        html = """<!DOCTYPE html>
<html>
<head>
    <title>Flow Pages</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 900px;
            margin: 50px auto;
            padding: 20px;
            background: #f5f5f5;
        }
        h1 {
            color: #2563eb;
        }
        .pages {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .page-item {
            padding: 15px;
            border-bottom: 1px solid #eee;
        }
        .page-item:last-child {
            border-bottom: none;
        }
        .page-item a {
            color: #2563eb;
            text-decoration: none;
            font-size: 1.1em;
            font-weight: 500;
        }
        .page-item a:hover {
            text-decoration: underline;
        }
        .page-meta {
            color: #666;
            font-size: 0.9em;
            margin-top: 5px;
        }
    </style>
</head>
<body>
    <h1>Flow Pages</h1>
    <div class="pages">
"""
        
        html_files = [e for e in entries if e.name.endswith('.html')]
        
        if not html_files:
            html += "<p>No pages created yet. Use Flow MCP tools to create your first page!</p>"
        else:
            for entry in html_files:
                name = entry.name[:-5]  # Remove .html extension
                stat = entry.stat()
                size_kb = stat.st_size / 1024
                html += f"""
                <div class="page-item">
                    <a href="/page/{name}">{name}</a>
                    <div class="page-meta">Size: {size_kb:.1f} KB</div>
                </div>
                """
        
        # Also look for markdown files
        md_files = [e for e in entries if e.name.endswith('.md')]
        for entry in md_files:
            name = entry.name[:-3]  # Remove .md extension
            # Only add if not already added as HTML
            if not any(f"{name}.html" == e.name for e in html_files):
                stat = entry.stat()
                size_kb = stat.st_size / 1024
                html += f"""
                <div class="page-item">
                    <a href="/page/{name}">{name}</a>
                    <div class="page-meta">Size: {size_kb:.1f} KB (markdown)</div>
                </div>
                """
        
        html += """
    </div>
</body>
</html>
"""
        
        # Send response
        encoded = html.encode('utf-8')
        self.send_response(200)
        self.send_header("Content-type", "text/html; charset=utf-8")
        self.send_header("Content-Length", str(len(encoded)))
        self.end_headers()
        self.wfile.write(encoded)
        return None

def start_server(port: int = 8084, host: str = '0.0.0.0'):
    """Start the static file server."""
    with socketserver.TCPServer((host, port), FlowWebHandler) as httpd:
        print(f"Flow Website Builder serving at http://{host}:{port}")
        print(f"Pages available at http://{host}:{port}/page/[page-name]")
        print(f"Press Ctrl+C to stop")
        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            print("\nServer stopped.")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Flow Website Builder Server')
    parser.add_argument('--port', type=int, default=8084, help='Port to serve on (default: 8084)')
    parser.add_argument('--host', default='0.0.0.0', help='Host to bind to (default: 0.0.0.0)')
    args = parser.parse_args()
    
    start_server(args.port, args.host)


